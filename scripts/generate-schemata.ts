import * as Cons from 'fp-ts/Console'
import { flow, pipe, tuple } from 'fp-ts/function'
import * as O from 'fp-ts/Option'
import * as Pred from 'fp-ts/Predicate'
import * as RTE from 'fp-ts/ReaderTaskEither'
import * as RA from 'fp-ts/ReadonlyArray'
import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
import * as Str from 'fp-ts/string'
import * as TE from 'fp-ts/TaskEither'
import * as ts from 'typescript'

import { type CLI, cli } from './CLI'
import { type FileSystem, fileSystem } from './FS'
import { run } from './run'

interface Build<A> extends RTE.ReaderTaskEither<FileSystem & CLI, Error, A> {}

const _ = ts.factory

const makeSchemataIndexFile: (
  schemata: ReadonlyArray<readonly [schemaName: string]>,
) => string = schemata => {
  const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed })
  const sourceFile = ts.createSourceFile(
    `${module}.ts`,
    '',
    ts.ScriptTarget.Latest,
    false,
    ts.ScriptKind.TS,
  )

  return pipe(
    [
      _.createJSDocComment(
        `Re-exports for all schemata-ts Schemata\n\n**Warning: DO NOT EDIT, this module is autogenerated**\n\n@since 2.0.0`,
      ),
      ...pipe(
        schemata,
        RA.map(([name]) =>
          _.createExportDeclaration(
            undefined,
            false,
            undefined,
            _.createStringLiteral(`schemata-ts/schemata/${name}`),
            undefined,
          ),
        ),
      ),
    ],
    _.createNodeArray,
    nodes => printer.printList(ts.ListFormat.MultiLine, nodes, sourceFile),
    Str.replace(/\/\*\*/gm, '\n/**'),
    Str.replace(/export/gm, '\nexport'),
  )
}

const writeToDisk: (path: string) => (contents: string) => Build<void> =
  path => contents => C =>
    C.writeFile(path, contents)

// #endregion

/** Extracts module name, e.g. ASCII.ts -> ASCII */
const getModuleName: (file: string) => O.Option<string> = flow(
  Str.split('.'),
  RNEA.head,
  O.fromPredicate(Pred.not(Str.includes('index'))),
)

const getSchemata: Build<ReadonlyArray<readonly [schemaName: string]>> = C =>
  pipe(
    C.readFiles('./src/schemata'),
    TE.map(RA.filterMap(flow(getModuleName, O.map(tuple)))),
  )

const format: Build<void> = C => C.exec('yarn format')

const main: Build<void> = pipe(
  getSchemata,
  RTE.chainFirstIOK(() => Cons.log('Writing `schemata/index.ts`...')),
  RTE.chainFirst(flow(makeSchemataIndexFile, writeToDisk('./src/schemata/index.ts'))),
  RTE.chainFirstIOK(() => Cons.log('Formatting with Prettier...')),
  RTE.chainFirst(() => format),
  RTE.chainIOK(() => Cons.log('Done!')),
)

run(
  main({
    ...fileSystem,
    ...cli,
  }),
)
