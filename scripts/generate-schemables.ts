import { camelCase, paramCase, pascalCase } from 'change-case'
import * as Cons from 'fp-ts/Console'
import { pipe, tuple } from 'fp-ts/function'
import * as RTE from 'fp-ts/ReaderTaskEither'
import * as RA from 'fp-ts/ReadonlyArray'
import * as Str from 'fp-ts/string'
import * as TE from 'fp-ts/TaskEither'
import * as ts from 'typescript'

import { type CLI, cli } from './CLI'
import { type FileSystem, fileSystem } from './FS'
import { run } from './run'
import { makeDestructureImport, makeModuleStarImport } from './ts-helpers'

interface Build<A> extends RTE.ReaderTaskEither<FileSystem & CLI, Error, A> {}

const _ = ts.factory

type Schemable = [name: string, path: string]

// #region Schemable

export const schemableHeaderComment: ts.JSDoc = _.createJSDocComment(
  `The Schemata-ts Schemable typeclass\n\n**Warning: DO NOT EDIT, this module is autogenerated**\n\n@since 1.0.0`,
)

export const makeSchemableTypeclass: (
  schemables: ReadonlyArray<Schemable>,
) => ts.InterfaceDeclaration = schemables =>
  _.createInterfaceDeclaration(
    [_.createModifier(ts.SyntaxKind.ExportKeyword)],
    _.createIdentifier(`Schemable`),
    [
      _.createTypeParameterDeclaration(
        undefined,
        _.createIdentifier('S'),
        _.createTypeReferenceNode(_.createIdentifier('SchemableLambda')),
        undefined,
      ),
    ],
    [
      _.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [
        ...pipe(
          schemables,
          RA.map(([schemable]) =>
            _.createExpressionWithTypeArguments(
              _.createIdentifier(`With${pascalCase(schemable)}`),
              [_.createTypeReferenceNode(_.createIdentifier('S'), undefined)],
            ),
          ),
        ),
      ]),
    ],
    [],
  )

/** Generate TS code for Schemable.ts */
const makeSchemableContents: (
  schemables: ReadonlyArray<Schemable>,
) => string = schemables => {
  const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed })
  const sourceFile = ts.createSourceFile(
    `${module}.ts`,
    '',
    ts.ScriptTarget.Latest,
    false,
    ts.ScriptKind.TS,
  )

  return pipe(
    [
      schemableHeaderComment,
      makeDestructureImport(['SchemableLambda'], 'schemata-ts/internal/schemable'),
      ...pipe(
        schemables,
        RA.map(([schemable, path]) =>
          makeDestructureImport([`With${pascalCase(schemable)}`], `${path}/definition`),
        ),
      ),

      instanceComment('Schemable', '2.0.0'),
      makeSchemableTypeclass(schemables),
    ],
    _.createNodeArray,
    nodes => printer.printList(ts.ListFormat.MultiLine, nodes, sourceFile),
    Str.replace(/\/\*\*/gm, '\n/**'),
  )
}

// #endregion

type SchemableTypeclass<
  Name extends string,
  Accessor extends string,
  Version extends string,
> = [name: Name, accessor: Accessor, version: Version, fileName: string]

/** Different typeclasses which express a Schemable instance */
export type SchemableTypeclasses =
  | SchemableTypeclass<'Arbitrary', 'Arb', '2.0.0'>
  | SchemableTypeclass<'Eq', 'Eq', '2.0.0'>
  | SchemableTypeclass<'Guard', 'G', '2.0.0'>
  | SchemableTypeclass<'Information', 'Inf', '2.0.0'>
  | SchemableTypeclass<'JsonSchema', 'JS', '2.0.0'>
  | SchemableTypeclass<'MergeSemigroup', 'MSg', '2.0.0'>
  | SchemableTypeclass<'TranscoderPar', 'TCP', '2.0.0'>
  | SchemableTypeclass<'Transcoder', 'TC', '2.0.0'>
  | SchemableTypeclass<'Schemable', '_', '2.0.0'>
  | SchemableTypeclass<'TypeString', 'TS', '2.0.0'>

// #region Typeclass modules

export const moduleHeaderComment: (module: string, version: string) => ts.JSDoc = (
  module,
  version,
) =>
  _.createJSDocComment(
    `Schemable instances for ${module}\n\n**Warning: DO NOT EDIT, this module is autogenerated**\n\n${
      module === 'Type' ? `@deprecated\n` : ''
    }@since ${version}`,
  )

export const instanceComment: (
  module: SchemableTypeclasses[0],
  version: SchemableTypeclasses[3],
) => ts.JSDoc = (__, version) =>
  _.createJSDocComment(`@since ${version}\n@category Instances`)

const makeSchemableInstance: (
  tc: SchemableTypeclasses,
  schemables: ReadonlyArray<Schemable>,
) => ts.VariableStatement = ([instanceName, accessor], schemables) =>
  _.createVariableStatement(
    [],
    _.createVariableDeclarationList(
      [
        _.createVariableDeclaration(
          _.createIdentifier(`${instanceName}Schemable`),
          undefined,
          _.createTypeReferenceNode(_.createIdentifier('Schemable'), [
            _.createTypeReferenceNode(
              _.createQualifiedName(
                _.createIdentifier(accessor),
                _.createIdentifier('SchemableLambda'),
              ),
              undefined,
            ),
          ]),
          _.createObjectLiteralExpression(
            [
              ...pipe(
                schemables,
                RA.map(([schemable]) =>
                  _.createSpreadAssignment(
                    _.createPropertyAccessExpression(
                      _.createIdentifier(camelCase(schemable)),
                      _.createIdentifier(`${pascalCase(schemable)}${instanceName}`),
                    ),
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ],
      ts.NodeFlags.Const,
    ),
  )

const makeInterpreter: (typeclass: SchemableTypeclasses) => ts.VariableStatement = ([
  module,
  ,
  version,
]) =>
  ts.addSyntheticLeadingComment(
    _.createVariableStatement(
      [_.createModifier(ts.SyntaxKind.ExportKeyword)],
      _.createVariableDeclarationList(
        [
          _.createVariableDeclaration(
            _.createIdentifier(`derive${module}`),
            undefined,
            undefined,
            _.createCallExpression(_.createIdentifier('interpret'), undefined, [
              _.createIdentifier(`${module}Schemable`),
            ]),
          ),
        ],
        ts.NodeFlags.Const,
      ),
    ),
    ts.SyntaxKind.MultiLineCommentTrivia,
    `* @since ${version}\n\n@category Interpreters`,
    true,
  )

/** Generate TS code for Decoder, Eq, Guard, TaskDecoder, Type, or Encoder */
const makeSchemableInstanceModuleContents: (
  typeclass: SchemableTypeclasses,
  schemables: ReadonlyArray<Schemable>,
) => string = (typeclass, schemables) => {
  const [module, accessor, sinceVersion, lowercaseModule] = typeclass

  const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed })
  const sourceFile = ts.createSourceFile(
    `${module}.ts`,
    '',
    ts.ScriptTarget.Latest,
    false,
    ts.ScriptKind.TS,
  )

  return pipe(
    [
      moduleHeaderComment(module, sinceVersion),
      makeModuleStarImport(accessor, `schemata-ts/internal/${paramCase(module)}`),
      makeDestructureImport(['Schemable'], 'schemata-ts/Schemable'),
      makeDestructureImport(['interpret'], 'schemata-ts/Schema'),
      ...pipe(
        schemables,
        RA.map(([schemable]) =>
          makeModuleStarImport(
            camelCase(schemable),
            `schemata-ts/schemables/${schemable}/instances/${lowercaseModule}`,
          ),
        ),
      ),
      instanceComment(module, sinceVersion),
      makeSchemableInstance(typeclass, schemables),
      makeInterpreter(typeclass),
    ],
    _.createNodeArray,
    nodes => printer.printList(ts.ListFormat.MultiLine, nodes, sourceFile),
    Str.replace(/\/\*\*/gm, '\n/**'),
  )
}

const writeToDisk: (path: string) => (contents: string) => Build<void> =
  path => contents => C =>
    C.writeFile(path, contents)

// #endregion

const getSchemables: Build<ReadonlyArray<Schemable>> = C =>
  pipe(
    C.readDirs('./src/schemables'),
    TE.map(RA.map(dirname => tuple(dirname, `schemata-ts/schemables/${dirname}`))),
  )

const schemableTypeclasses: ReadonlyArray<SchemableTypeclasses> = [
  ['Arbitrary', 'Arb', '2.0.0', 'arbitrary'],
  ['Eq', 'Eq', '2.0.0', 'eq'],
  ['Guard', 'G', '2.0.0', 'guard'],
  ['Information', 'Inf', '2.0.0', 'information'],
  ['JsonSchema', 'JS', '2.0.0', 'json-schema'],
  ['MergeSemigroup', 'MSg', '2.0.0', 'merge-semigroup'],
  ['TranscoderPar', 'TCP', '2.0.0', 'transcoder-par'],
  ['Transcoder', 'TC', '2.0.0', 'transcoder'],
  ['TypeString', 'TS', '2.0.0', 'type-string'],
]

const format: Build<void> = C => C.exec('yarn format')

const main: Build<void> = pipe(
  getSchemables,
  RTE.bindTo('schemables'),
  RTE.chainFirstIOK(() => Cons.log('Writing `Schemable` instance modules...')),
  RTE.chainFirst(({ schemables }) =>
    pipe(
      schemableTypeclasses,
      RTE.traverseArray(typeclass =>
        pipe(
          makeSchemableInstanceModuleContents(typeclass, schemables),
          writeToDisk(`./src/derivations/${typeclass[3]}-schemable.ts`),
          RTE.chainFirstIOK(() => Cons.log(`  - Writing src/${typeclass[0]}.ts...`)),
        ),
      ),
    ),
  ),
  RTE.chainFirstIOK(() => Cons.log('Writing `Schemable`...')),
  RTE.chainFirst(({ schemables }) =>
    pipe(makeSchemableContents(schemables), writeToDisk(`./src/Schemable.ts`)),
  ),
  RTE.chainFirstIOK(() => Cons.log('Formatting with Prettier...')),
  RTE.chainFirst(() => format),
  RTE.chainIOK(() => Cons.log('Done!')),
)

run(
  main({
    ...fileSystem,
    ...cli,
  }),
)
