/**
 * The extended Schemable typeclass
 *
 * **Warning: DO NOT EDIT, this module is autogenerated**
 *
 * @since 0.0.1
 */
import { URIS, URIS2 } from 'fp-ts/HKT'
import {
  Schemable1,
  Schemable2C,
  WithUnknownContainers1,
  WithUnknownContainers2C,
} from 'io-ts/Schemable'
import {
  Schemable2,
  SchemableHKT2,
  WithUnknownContainersHKT2,
  WithUnknownContainers2,
} from './internal/Schemable2'

/** Generic */
import * as optionFromExclude from './generic/optionFromExclude'
import * as optionFromNullable from './generic/optionFromNullable'
import * as optionFromUndefined from './generic/optionFromUndefined'

/** Number */
import * as int from './number/int'
import * as natural from './number/natural'
import * as negativeFloat from './number/negativeFloat'
import * as negativeInt from './number/negativeInt'
import * as nonNegativeFloat from './number/nonNegativeFloat'
import * as nonPositiveFloat from './number/nonPositiveFloat'
import * as nonPositiveInt from './number/nonPositiveInt'
import * as positiveFloat from './number/positiveFloat'
import * as positiveInt from './number/positiveInt'

/** String */
import * as ascii from './string/ascii'
import * as base64 from './string/base64'
import * as base64Url from './string/base64Url'
import * as bigIntString from './string/bigIntString'
import * as btcAddress from './string/btcAddress'
import * as creditCard from './string/creditCard'
import * as emailAddress from './string/emailAddress'
import * as hexColor from './string/hexColor'
import * as hexadecimal from './string/hexadecimal'
import * as hslColor from './string/hslColor'
import * as intString from './string/intString'
import * as isoDateString from './string/isoDateString'
import * as jwt from './string/jwt'
import * as naturalString from './string/naturalString'
import * as negativeFloatString from './string/negativeFloatString'
import * as negativeIntString from './string/negativeIntString'
import * as nonNegativeFloatString from './string/nonNegativeFloatString'
import * as nonPositiveFloatString from './string/nonPositiveFloatString'
import * as nonPositiveIntString from './string/nonPositiveIntString'
import * as nonemptyString from './string/nonemptyString'
import * as positiveFloatString from './string/positiveFloatString'
import * as positiveIntString from './string/positiveIntString'
import * as rgb from './string/rgb'
import * as uuid from './string/uuid'

/** Date */
import * as safeDate from './date/safeDate'

/**
 * @since 0.0.1
 * @category Instances
 */
export interface SchemableExt<S> extends SchemableHKT2<S>, WithUnknownContainersHKT2<S> {
  /**
   * Represents an exclusion of a supplied value where the exclusion is mapped to `None`.
   * Requires an inner schemable, and an Eq instance which defaults to strict equality.
   *
   * @since 0.0.4
   */
  readonly optionFromExclude: optionFromExclude.SchemableParams<S>

  /**
   * Represents a conversion from a nullable value to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromNullable: optionFromNullable.SchemableParams<S>

  /**
   * Represents a conversion from an value that can be undefined to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromUndefined: optionFromUndefined.SchemableParams<S>

  /**
   * Integer branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly int: int.SchemableParams<S>

  /**
   * Natural branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly natural: natural.SchemableParams<S>

  /**
   * Negative floating point branded newtype.
   *
   * Represents negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f < 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly negativeFloat: negativeFloat.SchemableParams<S>

  /**
   * Negative integer branded newtype.
   *
   * Represents negative integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z < 0 }
   * ```
   *
   * @since 0.0.1
   */
  readonly negativeInt: negativeInt.SchemableParams<S>

  /**
   * Non-negative floating point branded newtype.
   *
   * Represents non-negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f >= 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly nonNegativeFloat: nonNegativeFloat.SchemableParams<S>

  /**
   * Non-positive floating point branded newtype.
   *
   * Represents non-positive floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f <= 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveFloat: nonPositiveFloat.SchemableParams<S>

  /**
   * NonPositive integer branded newtype.
   *
   * Represents integers which are negative or zero.
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 0 }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveInt: nonPositiveInt.SchemableParams<S>

  /**
   * Positive Float branded newtype.
   *
   * Represents floating point numbers:
   *
   * ```math
   *  { f | f ∈ R, f > 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly positiveFloat: positiveFloat.SchemableParams<S>

  /**
   * Positive integer branded newtype.
   *
   * Represents positive integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z > 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly positiveInt: positiveInt.SchemableParams<S>

  /**
   * A string in which every character is valid ASCII.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isAscii`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isAscii.js).
   *
   * @since 0.0.1
   */
  readonly ascii: ascii.SchemableParams<S>

  /**
   * Representing a Base64-encoded string.
   *
   * For a URL-safe version, @see Base64UrlSafe module
   *
   * This module is heavily inspired by the `validator.js` module
   * [`isBase64`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBase64.js).
   *
   * @since 0.0.2
   */
  readonly base64: base64.SchemableParams<S>

  /**
   * Representing a URL-safe, Base64 encoded string.
   *
   * For a non-URL-safe alternative, @see Base64
   *
   * This module is heavily inspired by the `validator.js` module
   * [`isBase64`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBase64.js).
   *
   * @since 0.0.2
   */
  readonly base64Url: base64Url.SchemableParams<S>

  /**
   * Represents strings which can be converted into `BitInt`.
   *
   * @since 0.0.4
   */
  readonly bigIntString: bigIntString.SchemableParams<S>

  /**
   * Represents strings which are valid Bitcoin addresses.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isBtcAddress`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBtcAddress.js).
   *
   * @since 0.0.2
   */
  readonly btcAddress: btcAddress.SchemableParams<S>

  /**
   * Represents (some) valid credit card numbers.
   *
   * At the moment, this mostly handles Visa, Mastercard, American Express, Diners Club,
   * Discover, and JCB.
   *
   * @since 0.0.3
   */
  readonly creditCard: creditCard.SchemableParams<S>

  /**
   * Represents strings (email addresses) that conform to the RFC 5322 standard.
   *
   * See: https://emailregex.com/
   *
   * **Note: Does not validate international addresses**
   *
   * @since 0.0.1
   */
  readonly emailAddress: emailAddress.SchemableParams<S>

  /**
   * A valid hexadecimal color value.
   *
   * Inspired by
   * [isHexColor](https://github.com/validatorjs/validator.js/blob/master/src/lib/isHexColor.js)
   *
   * @since 0.0.3
   */
  readonly hexColor: hexColor.SchemableParams<S>

  /**
   * A string of hexadecimal characters.
   *
   * Inspired by
   * [isHexadecimal](https://github.com/validatorjs/validator.js/blob/master/src/lib/isHexadecimal.js)
   *
   * @since 0.0.3
   */
  readonly hexadecimal: hexadecimal.SchemableParams<S>

  /**
   * An HSL string. Commonly in CSS.
   *
   * @since 0.0.3
   * @example
   *   import { Guard } from 'schemable-ts-types/string/hslColor'
   *
   *   const hue = 270
   *   const saturation = 60
   *   const lightness = 70
   *   const alpha = 0.7
   *
   *   const hslString = `hsl(${hue} ${saturation}% ${lightness}% / ${alpha})`
   *
   *   assert.equal(Guard.is(hslString), true)
   */
  readonly hslColor: hslColor.SchemableParams<S>

  /**
   * Integer branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly intString: intString.SchemableParams<S>

  /**
   * Represents strings that conform to the ISO 8601 standard.
   *
   * @since 0.0.1
   */
  readonly isoDateString: isoDateString.SchemableParams<S>

  /**
   * A valid, Base64-encoded JWT.
   *
   * Inspired by validator.js' [JWT
   * module](https://github.com/validatorjs/validator.js/blob/master/src/lib/isJWT.js).
   *
   * @since 0.0.2
   */
  readonly jwt: jwt.SchemableParams<S>

  /**
   * Natural branded newtype string.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly naturalString: naturalString.SchemableParams<S>

  /**
   * Negative floating point branded newtype string.
   *
   * Represents negative floating point number strings:
   *
   * ```math
   *  { f | f ∈ ℝ, f < 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly negativeFloatString: negativeFloatString.SchemableParams<S>

  /**
   * Negative integer branded newtype string.
   *
   * Represents negative integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z < 0 }
   * ```
   *
   * @since 0.0.1
   */
  readonly negativeIntString: negativeIntString.SchemableParams<S>

  /**
   * Non-negative floating point branded newtype string.
   *
   * Represents non-negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f >= 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly nonNegativeFloatString: nonNegativeFloatString.SchemableParams<S>

  /**
   * Non-positive floating point branded newtype string.
   *
   * Represents non-positive floating point number strings:
   *
   * ```math
   *  { f | f ∈ ℝ, f <= 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveFloatString: nonPositiveFloatString.SchemableParams<S>

  /**
   * NonPositive integer branded newtype string.
   *
   * Represents integer strings which are negative or zero.
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 0 }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveIntString: nonPositiveIntString.SchemableParams<S>

  /**
   * Represents strings that are not empty strings.
   *
   * @since 0.0.1
   */
  readonly nonemptyString: nonemptyString.SchemableParams<S>

  /**
   * Positive floating point branded newtype string.
   *
   * Represents positive floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f > 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly positiveFloatString: positiveFloatString.SchemableParams<S>

  /**
   * Positive integer branded newtype string.
   *
   * Represents positive integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z > 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly positiveIntString: positiveIntString.SchemableParams<S>

  /**
   * Represents strings which are valid RGB colors. Permits both absolute and percentage
   * based values.
   *
   * @since 0.0.4
   */
  readonly rgb: rgb.SchemableParams<S>

  /**
   * Represents strings that are UUIDs.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isUUID`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isUUID.js).
   *
   * @since 0.0.1
   */
  readonly uuid: uuid.SchemableParams<S>

  /**
   * Represents Date objects which are not invalid dates
   *
   * @since 0.0.1
   */
  readonly safeDate: safeDate.SchemableParams<S>
}

/**
 * @since 0.0.1
 * @category Instances
 */
export interface SchemableExt1<S extends URIS>
  extends Schemable1<S>,
    WithUnknownContainers1<S> {
  /**
   * Represents an exclusion of a supplied value where the exclusion is mapped to `None`.
   * Requires an inner schemable, and an Eq instance which defaults to strict equality.
   *
   * @since 0.0.4
   */
  readonly optionFromExclude: optionFromExclude.SchemableParams1<S>

  /**
   * Represents a conversion from a nullable value to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromNullable: optionFromNullable.SchemableParams1<S>

  /**
   * Represents a conversion from an value that can be undefined to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromUndefined: optionFromUndefined.SchemableParams1<S>

  /**
   * Integer branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly int: int.SchemableParams1<S>

  /**
   * Natural branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly natural: natural.SchemableParams1<S>

  /**
   * Negative floating point branded newtype.
   *
   * Represents negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f < 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly negativeFloat: negativeFloat.SchemableParams1<S>

  /**
   * Negative integer branded newtype.
   *
   * Represents negative integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z < 0 }
   * ```
   *
   * @since 0.0.1
   */
  readonly negativeInt: negativeInt.SchemableParams1<S>

  /**
   * Non-negative floating point branded newtype.
   *
   * Represents non-negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f >= 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly nonNegativeFloat: nonNegativeFloat.SchemableParams1<S>

  /**
   * Non-positive floating point branded newtype.
   *
   * Represents non-positive floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f <= 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveFloat: nonPositiveFloat.SchemableParams1<S>

  /**
   * NonPositive integer branded newtype.
   *
   * Represents integers which are negative or zero.
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 0 }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveInt: nonPositiveInt.SchemableParams1<S>

  /**
   * Positive Float branded newtype.
   *
   * Represents floating point numbers:
   *
   * ```math
   *  { f | f ∈ R, f > 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly positiveFloat: positiveFloat.SchemableParams1<S>

  /**
   * Positive integer branded newtype.
   *
   * Represents positive integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z > 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly positiveInt: positiveInt.SchemableParams1<S>

  /**
   * A string in which every character is valid ASCII.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isAscii`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isAscii.js).
   *
   * @since 0.0.1
   */
  readonly ascii: ascii.SchemableParams1<S>

  /**
   * Representing a Base64-encoded string.
   *
   * For a URL-safe version, @see Base64UrlSafe module
   *
   * This module is heavily inspired by the `validator.js` module
   * [`isBase64`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBase64.js).
   *
   * @since 0.0.2
   */
  readonly base64: base64.SchemableParams1<S>

  /**
   * Representing a URL-safe, Base64 encoded string.
   *
   * For a non-URL-safe alternative, @see Base64
   *
   * This module is heavily inspired by the `validator.js` module
   * [`isBase64`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBase64.js).
   *
   * @since 0.0.2
   */
  readonly base64Url: base64Url.SchemableParams1<S>

  /**
   * Represents strings which can be converted into `BitInt`.
   *
   * @since 0.0.4
   */
  readonly bigIntString: bigIntString.SchemableParams1<S>

  /**
   * Represents strings which are valid Bitcoin addresses.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isBtcAddress`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBtcAddress.js).
   *
   * @since 0.0.2
   */
  readonly btcAddress: btcAddress.SchemableParams1<S>

  /**
   * Represents (some) valid credit card numbers.
   *
   * At the moment, this mostly handles Visa, Mastercard, American Express, Diners Club,
   * Discover, and JCB.
   *
   * @since 0.0.3
   */
  readonly creditCard: creditCard.SchemableParams1<S>

  /**
   * Represents strings (email addresses) that conform to the RFC 5322 standard.
   *
   * See: https://emailregex.com/
   *
   * **Note: Does not validate international addresses**
   *
   * @since 0.0.1
   */
  readonly emailAddress: emailAddress.SchemableParams1<S>

  /**
   * A valid hexadecimal color value.
   *
   * Inspired by
   * [isHexColor](https://github.com/validatorjs/validator.js/blob/master/src/lib/isHexColor.js)
   *
   * @since 0.0.3
   */
  readonly hexColor: hexColor.SchemableParams1<S>

  /**
   * A string of hexadecimal characters.
   *
   * Inspired by
   * [isHexadecimal](https://github.com/validatorjs/validator.js/blob/master/src/lib/isHexadecimal.js)
   *
   * @since 0.0.3
   */
  readonly hexadecimal: hexadecimal.SchemableParams1<S>

  /**
   * An HSL string. Commonly in CSS.
   *
   * @since 0.0.3
   * @example
   *   import { Guard } from 'schemable-ts-types/string/hslColor'
   *
   *   const hue = 270
   *   const saturation = 60
   *   const lightness = 70
   *   const alpha = 0.7
   *
   *   const hslString = `hsl(${hue} ${saturation}% ${lightness}% / ${alpha})`
   *
   *   assert.equal(Guard.is(hslString), true)
   */
  readonly hslColor: hslColor.SchemableParams1<S>

  /**
   * Integer branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly intString: intString.SchemableParams1<S>

  /**
   * Represents strings that conform to the ISO 8601 standard.
   *
   * @since 0.0.1
   */
  readonly isoDateString: isoDateString.SchemableParams1<S>

  /**
   * A valid, Base64-encoded JWT.
   *
   * Inspired by validator.js' [JWT
   * module](https://github.com/validatorjs/validator.js/blob/master/src/lib/isJWT.js).
   *
   * @since 0.0.2
   */
  readonly jwt: jwt.SchemableParams1<S>

  /**
   * Natural branded newtype string.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly naturalString: naturalString.SchemableParams1<S>

  /**
   * Negative floating point branded newtype string.
   *
   * Represents negative floating point number strings:
   *
   * ```math
   *  { f | f ∈ ℝ, f < 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly negativeFloatString: negativeFloatString.SchemableParams1<S>

  /**
   * Negative integer branded newtype string.
   *
   * Represents negative integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z < 0 }
   * ```
   *
   * @since 0.0.1
   */
  readonly negativeIntString: negativeIntString.SchemableParams1<S>

  /**
   * Non-negative floating point branded newtype string.
   *
   * Represents non-negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f >= 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly nonNegativeFloatString: nonNegativeFloatString.SchemableParams1<S>

  /**
   * Non-positive floating point branded newtype string.
   *
   * Represents non-positive floating point number strings:
   *
   * ```math
   *  { f | f ∈ ℝ, f <= 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveFloatString: nonPositiveFloatString.SchemableParams1<S>

  /**
   * NonPositive integer branded newtype string.
   *
   * Represents integer strings which are negative or zero.
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 0 }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveIntString: nonPositiveIntString.SchemableParams1<S>

  /**
   * Represents strings that are not empty strings.
   *
   * @since 0.0.1
   */
  readonly nonemptyString: nonemptyString.SchemableParams1<S>

  /**
   * Positive floating point branded newtype string.
   *
   * Represents positive floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f > 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly positiveFloatString: positiveFloatString.SchemableParams1<S>

  /**
   * Positive integer branded newtype string.
   *
   * Represents positive integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z > 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly positiveIntString: positiveIntString.SchemableParams1<S>

  /**
   * Represents strings which are valid RGB colors. Permits both absolute and percentage
   * based values.
   *
   * @since 0.0.4
   */
  readonly rgb: rgb.SchemableParams1<S>

  /**
   * Represents strings that are UUIDs.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isUUID`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isUUID.js).
   *
   * @since 0.0.1
   */
  readonly uuid: uuid.SchemableParams1<S>

  /**
   * Represents Date objects which are not invalid dates
   *
   * @since 0.0.1
   */
  readonly safeDate: safeDate.SchemableParams1<S>
}

/**
 * @since 0.0.1
 * @category Instances
 */
export interface SchemableExt2<S extends URIS2>
  extends Schemable2<S>,
    WithUnknownContainers2<S> {
  /**
   * Represents an exclusion of a supplied value where the exclusion is mapped to `None`.
   * Requires an inner schemable, and an Eq instance which defaults to strict equality.
   *
   * @since 0.0.4
   */
  readonly optionFromExclude: optionFromExclude.SchemableParams2<S>

  /**
   * Represents a conversion from a nullable value to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromNullable: optionFromNullable.SchemableParams2<S>

  /**
   * Represents a conversion from an value that can be undefined to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromUndefined: optionFromUndefined.SchemableParams2<S>

  /**
   * Integer branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly int: int.SchemableParams2<S>

  /**
   * Natural branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly natural: natural.SchemableParams2<S>

  /**
   * Negative floating point branded newtype.
   *
   * Represents negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f < 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly negativeFloat: negativeFloat.SchemableParams2<S>

  /**
   * Negative integer branded newtype.
   *
   * Represents negative integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z < 0 }
   * ```
   *
   * @since 0.0.1
   */
  readonly negativeInt: negativeInt.SchemableParams2<S>

  /**
   * Non-negative floating point branded newtype.
   *
   * Represents non-negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f >= 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly nonNegativeFloat: nonNegativeFloat.SchemableParams2<S>

  /**
   * Non-positive floating point branded newtype.
   *
   * Represents non-positive floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f <= 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveFloat: nonPositiveFloat.SchemableParams2<S>

  /**
   * NonPositive integer branded newtype.
   *
   * Represents integers which are negative or zero.
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 0 }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveInt: nonPositiveInt.SchemableParams2<S>

  /**
   * Positive Float branded newtype.
   *
   * Represents floating point numbers:
   *
   * ```math
   *  { f | f ∈ R, f > 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly positiveFloat: positiveFloat.SchemableParams2<S>

  /**
   * Positive integer branded newtype.
   *
   * Represents positive integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z > 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly positiveInt: positiveInt.SchemableParams2<S>

  /**
   * A string in which every character is valid ASCII.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isAscii`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isAscii.js).
   *
   * @since 0.0.1
   */
  readonly ascii: ascii.SchemableParams2<S>

  /**
   * Representing a Base64-encoded string.
   *
   * For a URL-safe version, @see Base64UrlSafe module
   *
   * This module is heavily inspired by the `validator.js` module
   * [`isBase64`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBase64.js).
   *
   * @since 0.0.2
   */
  readonly base64: base64.SchemableParams2<S>

  /**
   * Representing a URL-safe, Base64 encoded string.
   *
   * For a non-URL-safe alternative, @see Base64
   *
   * This module is heavily inspired by the `validator.js` module
   * [`isBase64`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBase64.js).
   *
   * @since 0.0.2
   */
  readonly base64Url: base64Url.SchemableParams2<S>

  /**
   * Represents strings which can be converted into `BitInt`.
   *
   * @since 0.0.4
   */
  readonly bigIntString: bigIntString.SchemableParams2<S>

  /**
   * Represents strings which are valid Bitcoin addresses.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isBtcAddress`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBtcAddress.js).
   *
   * @since 0.0.2
   */
  readonly btcAddress: btcAddress.SchemableParams2<S>

  /**
   * Represents (some) valid credit card numbers.
   *
   * At the moment, this mostly handles Visa, Mastercard, American Express, Diners Club,
   * Discover, and JCB.
   *
   * @since 0.0.3
   */
  readonly creditCard: creditCard.SchemableParams2<S>

  /**
   * Represents strings (email addresses) that conform to the RFC 5322 standard.
   *
   * See: https://emailregex.com/
   *
   * **Note: Does not validate international addresses**
   *
   * @since 0.0.1
   */
  readonly emailAddress: emailAddress.SchemableParams2<S>

  /**
   * A valid hexadecimal color value.
   *
   * Inspired by
   * [isHexColor](https://github.com/validatorjs/validator.js/blob/master/src/lib/isHexColor.js)
   *
   * @since 0.0.3
   */
  readonly hexColor: hexColor.SchemableParams2<S>

  /**
   * A string of hexadecimal characters.
   *
   * Inspired by
   * [isHexadecimal](https://github.com/validatorjs/validator.js/blob/master/src/lib/isHexadecimal.js)
   *
   * @since 0.0.3
   */
  readonly hexadecimal: hexadecimal.SchemableParams2<S>

  /**
   * An HSL string. Commonly in CSS.
   *
   * @since 0.0.3
   * @example
   *   import { Guard } from 'schemable-ts-types/string/hslColor'
   *
   *   const hue = 270
   *   const saturation = 60
   *   const lightness = 70
   *   const alpha = 0.7
   *
   *   const hslString = `hsl(${hue} ${saturation}% ${lightness}% / ${alpha})`
   *
   *   assert.equal(Guard.is(hslString), true)
   */
  readonly hslColor: hslColor.SchemableParams2<S>

  /**
   * Integer branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly intString: intString.SchemableParams2<S>

  /**
   * Represents strings that conform to the ISO 8601 standard.
   *
   * @since 0.0.1
   */
  readonly isoDateString: isoDateString.SchemableParams2<S>

  /**
   * A valid, Base64-encoded JWT.
   *
   * Inspired by validator.js' [JWT
   * module](https://github.com/validatorjs/validator.js/blob/master/src/lib/isJWT.js).
   *
   * @since 0.0.2
   */
  readonly jwt: jwt.SchemableParams2<S>

  /**
   * Natural branded newtype string.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly naturalString: naturalString.SchemableParams2<S>

  /**
   * Negative floating point branded newtype string.
   *
   * Represents negative floating point number strings:
   *
   * ```math
   *  { f | f ∈ ℝ, f < 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly negativeFloatString: negativeFloatString.SchemableParams2<S>

  /**
   * Negative integer branded newtype string.
   *
   * Represents negative integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z < 0 }
   * ```
   *
   * @since 0.0.1
   */
  readonly negativeIntString: negativeIntString.SchemableParams2<S>

  /**
   * Non-negative floating point branded newtype string.
   *
   * Represents non-negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f >= 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly nonNegativeFloatString: nonNegativeFloatString.SchemableParams2<S>

  /**
   * Non-positive floating point branded newtype string.
   *
   * Represents non-positive floating point number strings:
   *
   * ```math
   *  { f | f ∈ ℝ, f <= 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveFloatString: nonPositiveFloatString.SchemableParams2<S>

  /**
   * NonPositive integer branded newtype string.
   *
   * Represents integer strings which are negative or zero.
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 0 }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveIntString: nonPositiveIntString.SchemableParams2<S>

  /**
   * Represents strings that are not empty strings.
   *
   * @since 0.0.1
   */
  readonly nonemptyString: nonemptyString.SchemableParams2<S>

  /**
   * Positive floating point branded newtype string.
   *
   * Represents positive floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f > 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly positiveFloatString: positiveFloatString.SchemableParams2<S>

  /**
   * Positive integer branded newtype string.
   *
   * Represents positive integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z > 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly positiveIntString: positiveIntString.SchemableParams2<S>

  /**
   * Represents strings which are valid RGB colors. Permits both absolute and percentage
   * based values.
   *
   * @since 0.0.4
   */
  readonly rgb: rgb.SchemableParams2<S>

  /**
   * Represents strings that are UUIDs.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isUUID`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isUUID.js).
   *
   * @since 0.0.1
   */
  readonly uuid: uuid.SchemableParams2<S>

  /**
   * Represents Date objects which are not invalid dates
   *
   * @since 0.0.1
   */
  readonly safeDate: safeDate.SchemableParams2<S>
}

/**
 * @since 0.0.1
 * @category Instances
 */
export interface SchemableExt2C<S extends URIS2>
  extends Schemable2C<S, unknown>,
    WithUnknownContainers2C<S, unknown> {
  /**
   * Represents an exclusion of a supplied value where the exclusion is mapped to `None`.
   * Requires an inner schemable, and an Eq instance which defaults to strict equality.
   *
   * @since 0.0.4
   */
  readonly optionFromExclude: optionFromExclude.SchemableParams2C<S>

  /**
   * Represents a conversion from a nullable value to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromNullable: optionFromNullable.SchemableParams2C<S>

  /**
   * Represents a conversion from an value that can be undefined to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromUndefined: optionFromUndefined.SchemableParams2C<S>

  /**
   * Integer branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly int: int.SchemableParams2C<S>

  /**
   * Natural branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly natural: natural.SchemableParams2C<S>

  /**
   * Negative floating point branded newtype.
   *
   * Represents negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f < 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly negativeFloat: negativeFloat.SchemableParams2C<S>

  /**
   * Negative integer branded newtype.
   *
   * Represents negative integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z < 0 }
   * ```
   *
   * @since 0.0.1
   */
  readonly negativeInt: negativeInt.SchemableParams2C<S>

  /**
   * Non-negative floating point branded newtype.
   *
   * Represents non-negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f >= 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly nonNegativeFloat: nonNegativeFloat.SchemableParams2C<S>

  /**
   * Non-positive floating point branded newtype.
   *
   * Represents non-positive floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f <= 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveFloat: nonPositiveFloat.SchemableParams2C<S>

  /**
   * NonPositive integer branded newtype.
   *
   * Represents integers which are negative or zero.
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 0 }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveInt: nonPositiveInt.SchemableParams2C<S>

  /**
   * Positive Float branded newtype.
   *
   * Represents floating point numbers:
   *
   * ```math
   *  { f | f ∈ R, f > 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly positiveFloat: positiveFloat.SchemableParams2C<S>

  /**
   * Positive integer branded newtype.
   *
   * Represents positive integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z > 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly positiveInt: positiveInt.SchemableParams2C<S>

  /**
   * A string in which every character is valid ASCII.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isAscii`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isAscii.js).
   *
   * @since 0.0.1
   */
  readonly ascii: ascii.SchemableParams2C<S>

  /**
   * Representing a Base64-encoded string.
   *
   * For a URL-safe version, @see Base64UrlSafe module
   *
   * This module is heavily inspired by the `validator.js` module
   * [`isBase64`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBase64.js).
   *
   * @since 0.0.2
   */
  readonly base64: base64.SchemableParams2C<S>

  /**
   * Representing a URL-safe, Base64 encoded string.
   *
   * For a non-URL-safe alternative, @see Base64
   *
   * This module is heavily inspired by the `validator.js` module
   * [`isBase64`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBase64.js).
   *
   * @since 0.0.2
   */
  readonly base64Url: base64Url.SchemableParams2C<S>

  /**
   * Represents strings which can be converted into `BitInt`.
   *
   * @since 0.0.4
   */
  readonly bigIntString: bigIntString.SchemableParams2C<S>

  /**
   * Represents strings which are valid Bitcoin addresses.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isBtcAddress`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isBtcAddress.js).
   *
   * @since 0.0.2
   */
  readonly btcAddress: btcAddress.SchemableParams2C<S>

  /**
   * Represents (some) valid credit card numbers.
   *
   * At the moment, this mostly handles Visa, Mastercard, American Express, Diners Club,
   * Discover, and JCB.
   *
   * @since 0.0.3
   */
  readonly creditCard: creditCard.SchemableParams2C<S>

  /**
   * Represents strings (email addresses) that conform to the RFC 5322 standard.
   *
   * See: https://emailregex.com/
   *
   * **Note: Does not validate international addresses**
   *
   * @since 0.0.1
   */
  readonly emailAddress: emailAddress.SchemableParams2C<S>

  /**
   * A valid hexadecimal color value.
   *
   * Inspired by
   * [isHexColor](https://github.com/validatorjs/validator.js/blob/master/src/lib/isHexColor.js)
   *
   * @since 0.0.3
   */
  readonly hexColor: hexColor.SchemableParams2C<S>

  /**
   * A string of hexadecimal characters.
   *
   * Inspired by
   * [isHexadecimal](https://github.com/validatorjs/validator.js/blob/master/src/lib/isHexadecimal.js)
   *
   * @since 0.0.3
   */
  readonly hexadecimal: hexadecimal.SchemableParams2C<S>

  /**
   * An HSL string. Commonly in CSS.
   *
   * @since 0.0.3
   * @example
   *   import { Guard } from 'schemable-ts-types/string/hslColor'
   *
   *   const hue = 270
   *   const saturation = 60
   *   const lightness = 70
   *   const alpha = 0.7
   *
   *   const hslString = `hsl(${hue} ${saturation}% ${lightness}% / ${alpha})`
   *
   *   assert.equal(Guard.is(hslString), true)
   */
  readonly hslColor: hslColor.SchemableParams2C<S>

  /**
   * Integer branded newtype.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly intString: intString.SchemableParams2C<S>

  /**
   * Represents strings that conform to the ISO 8601 standard.
   *
   * @since 0.0.1
   */
  readonly isoDateString: isoDateString.SchemableParams2C<S>

  /**
   * A valid, Base64-encoded JWT.
   *
   * Inspired by validator.js' [JWT
   * module](https://github.com/validatorjs/validator.js/blob/master/src/lib/isJWT.js).
   *
   * @since 0.0.2
   */
  readonly jwt: jwt.SchemableParams2C<S>

  /**
   * Natural branded newtype string.
   *
   * Represents integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly naturalString: naturalString.SchemableParams2C<S>

  /**
   * Negative floating point branded newtype string.
   *
   * Represents negative floating point number strings:
   *
   * ```math
   *  { f | f ∈ ℝ, f < 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly negativeFloatString: negativeFloatString.SchemableParams2C<S>

  /**
   * Negative integer branded newtype string.
   *
   * Represents negative integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z < 0 }
   * ```
   *
   * @since 0.0.1
   */
  readonly negativeIntString: negativeIntString.SchemableParams2C<S>

  /**
   * Non-negative floating point branded newtype string.
   *
   * Represents non-negative floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f >= 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly nonNegativeFloatString: nonNegativeFloatString.SchemableParams2C<S>

  /**
   * Non-positive floating point branded newtype string.
   *
   * Represents non-positive floating point number strings:
   *
   * ```math
   *  { f | f ∈ ℝ, f <= 0, f >= -Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveFloatString: nonPositiveFloatString.SchemableParams2C<S>

  /**
   * NonPositive integer branded newtype string.
   *
   * Represents integer strings which are negative or zero.
   *
   * ```math
   *  { z | z ∈ ℤ, z >= -2 ** 53 + 1, z <= 0 }
   * ```
   *
   * @since 0.0.4
   */
  readonly nonPositiveIntString: nonPositiveIntString.SchemableParams2C<S>

  /**
   * Represents strings that are not empty strings.
   *
   * @since 0.0.1
   */
  readonly nonemptyString: nonemptyString.SchemableParams2C<S>

  /**
   * Positive floating point branded newtype string.
   *
   * Represents positive floating point numbers:
   *
   * ```math
   *  { f | f ∈ ℝ, f > 0, f <= Number.MAX_VALUE }
   * ```
   *
   * @since 0.0.2
   */
  readonly positiveFloatString: positiveFloatString.SchemableParams2C<S>

  /**
   * Positive integer branded newtype string.
   *
   * Represents positive integers:
   *
   * ```math
   *  { z | z ∈ ℤ, z > 0, z <= 2 ** 53 - 1 }
   * ```
   *
   * @since 0.0.1
   */
  readonly positiveIntString: positiveIntString.SchemableParams2C<S>

  /**
   * Represents strings which are valid RGB colors. Permits both absolute and percentage
   * based values.
   *
   * @since 0.0.4
   */
  readonly rgb: rgb.SchemableParams2C<S>

  /**
   * Represents strings that are UUIDs.
   *
   * This is heavily inspired by the `validator.js` module
   * [`isUUID`](https://github.com/validatorjs/validator.js/blob/master/src/lib/isUUID.js).
   *
   * @since 0.0.1
   */
  readonly uuid: uuid.SchemableParams2C<S>

  /**
   * Represents Date objects which are not invalid dates
   *
   * @since 0.0.1
   */
  readonly safeDate: safeDate.SchemableParams2C<S>
}
