/**
 * The extended Schemable typeclass
 *
 * **Warning: DO NOT EDIT, this module is autogenerated**
 *
 * @since 0.0.1
 */
import { URIS, URIS2 } from 'fp-ts/HKT'
import { Schemable1, Schemable2C } from 'io-ts/Schemable'
import { Schemable2, SchemableHKT2 } from './internal/Schemable2'
import {
  WithBrand1,
  WithBrand2,
  WithBrand2C,
  WithBrandHKT2,
} from './schemables/WithBrand'
import {
  WithCheckDigit1,
  WithCheckDigit2,
  WithCheckDigit2C,
  WithCheckDigitHKT2,
} from './schemables/WithCheckDigit'
import {
  WithFloat1,
  WithFloat2,
  WithFloat2C,
  WithFloatHKT2,
} from './schemables/WithFloat'
import { WithInt1, WithInt2, WithInt2C, WithIntHKT2 } from './schemables/WithInt'
import {
  WithInvariant1,
  WithInvariant2,
  WithInvariant2C,
  WithInvariantHKT2,
} from './schemables/WithInvariant'
import {
  WithPadding1,
  WithPadding2,
  WithPadding2C,
  WithPaddingHKT2,
} from './schemables/WithPadding'
import {
  WithPattern1,
  WithPattern2,
  WithPattern2C,
  WithPatternHKT2,
} from './schemables/WithPattern'
import {
  WithRefine1,
  WithRefine2,
  WithRefine2C,
  WithRefineHKT2,
} from './schemables/WithRefine'
import {
  WithUnknownContainers1,
  WithUnknownContainers2,
  WithUnknownContainers2C,
  WithUnknownContainersHKT2,
} from './schemables/WithUnknownContainers'

/** Generic */
import * as mapFromEntries from './generic/mapFromEntries'
import * as optionFromExclude from './generic/optionFromExclude'
import * as optionFromNullable from './generic/optionFromNullable'
import * as optionFromUndefined from './generic/optionFromUndefined'

/** Date */
import * as date from './date/date'
import * as dateFromIsoString from './date/dateFromIsoString'

/**
 * @since 0.0.1
 * @category Instances
 */
export interface SchemableExt<S>
  extends SchemableHKT2<S>,
    WithBrandHKT2<S>,
    WithCheckDigitHKT2<S>,
    WithFloatHKT2<S>,
    WithIntHKT2<S>,
    WithInvariantHKT2<S>,
    WithPaddingHKT2<S>,
    WithPatternHKT2<S>,
    WithRefineHKT2<S>,
    WithUnknownContainersHKT2<S> {
  /**
   * Represents a ReadonlyMap converted from an expected array of entries.
   *
   * @since 1.0.0
   */
  readonly mapFromEntries: mapFromEntries.SchemableParams<S>

  /**
   * Represents an exclusion of a supplied value where the exclusion is mapped to `None`.
   * Requires an inner schemable, and an Eq instance which defaults to strict equality.
   *
   * @since 1.0.0
   */
  readonly optionFromExclude: optionFromExclude.SchemableParams<S>

  /**
   * Represents a conversion from a nullable value to an Optional type
   *
   * @since 1.0.0
   */
  readonly optionFromNullable: optionFromNullable.SchemableParams<S>

  /**
   * Represents a conversion from an value that can be undefined to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromUndefined: optionFromUndefined.SchemableParams<S>

  /**
   * Represents valid Date objects
   *
   * @since 1.0.0
   */
  readonly date: date.SchemableParams<S>

  /**
   * Represents a conversion from a valid dateString according to
   * [ECMA262](https://tc39.es/ecma262/#sec-date-time-string-format) which is a particular
   * subset of ISO8601 parsable with `Date.parse()`.
   *
   * @since 1.0.0
   */
  readonly dateFromIsoString: dateFromIsoString.SchemableParams<S>
}

/**
 * @since 0.0.1
 * @category Instances
 */
export interface SchemableExt1<S extends URIS>
  extends Schemable1<S>,
    WithBrand1<S>,
    WithCheckDigit1<S>,
    WithFloat1<S>,
    WithInt1<S>,
    WithInvariant1<S>,
    WithPadding1<S>,
    WithPattern1<S>,
    WithRefine1<S>,
    WithUnknownContainers1<S> {
  /**
   * Represents a ReadonlyMap converted from an expected array of entries.
   *
   * @since 1.0.0
   */
  readonly mapFromEntries: mapFromEntries.SchemableParams1<S>

  /**
   * Represents an exclusion of a supplied value where the exclusion is mapped to `None`.
   * Requires an inner schemable, and an Eq instance which defaults to strict equality.
   *
   * @since 1.0.0
   */
  readonly optionFromExclude: optionFromExclude.SchemableParams1<S>

  /**
   * Represents a conversion from a nullable value to an Optional type
   *
   * @since 1.0.0
   */
  readonly optionFromNullable: optionFromNullable.SchemableParams1<S>

  /**
   * Represents a conversion from an value that can be undefined to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromUndefined: optionFromUndefined.SchemableParams1<S>

  /**
   * Represents valid Date objects
   *
   * @since 1.0.0
   */
  readonly date: date.SchemableParams1<S>

  /**
   * Represents a conversion from a valid dateString according to
   * [ECMA262](https://tc39.es/ecma262/#sec-date-time-string-format) which is a particular
   * subset of ISO8601 parsable with `Date.parse()`.
   *
   * @since 1.0.0
   */
  readonly dateFromIsoString: dateFromIsoString.SchemableParams1<S>
}

/**
 * @since 0.0.1
 * @category Instances
 */
export interface SchemableExt2<S extends URIS2>
  extends Schemable2<S>,
    WithBrand2<S>,
    WithCheckDigit2<S>,
    WithFloat2<S>,
    WithInt2<S>,
    WithInvariant2<S>,
    WithPadding2<S>,
    WithPattern2<S>,
    WithRefine2<S>,
    WithUnknownContainers2<S> {
  /**
   * Represents a ReadonlyMap converted from an expected array of entries.
   *
   * @since 1.0.0
   */
  readonly mapFromEntries: mapFromEntries.SchemableParams2<S>

  /**
   * Represents an exclusion of a supplied value where the exclusion is mapped to `None`.
   * Requires an inner schemable, and an Eq instance which defaults to strict equality.
   *
   * @since 1.0.0
   */
  readonly optionFromExclude: optionFromExclude.SchemableParams2<S>

  /**
   * Represents a conversion from a nullable value to an Optional type
   *
   * @since 1.0.0
   */
  readonly optionFromNullable: optionFromNullable.SchemableParams2<S>

  /**
   * Represents a conversion from an value that can be undefined to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromUndefined: optionFromUndefined.SchemableParams2<S>

  /**
   * Represents valid Date objects
   *
   * @since 1.0.0
   */
  readonly date: date.SchemableParams2<S>

  /**
   * Represents a conversion from a valid dateString according to
   * [ECMA262](https://tc39.es/ecma262/#sec-date-time-string-format) which is a particular
   * subset of ISO8601 parsable with `Date.parse()`.
   *
   * @since 1.0.0
   */
  readonly dateFromIsoString: dateFromIsoString.SchemableParams2<S>
}

/**
 * @since 0.0.1
 * @category Instances
 */
export interface SchemableExt2C<S extends URIS2>
  extends Schemable2C<S, unknown>,
    WithBrand2C<S, unknown>,
    WithCheckDigit2C<S, unknown>,
    WithFloat2C<S, unknown>,
    WithInt2C<S, unknown>,
    WithInvariant2C<S, unknown>,
    WithPadding2C<S, unknown>,
    WithPattern2C<S, unknown>,
    WithRefine2C<S, unknown>,
    WithUnknownContainers2C<S, unknown> {
  /**
   * Represents a ReadonlyMap converted from an expected array of entries.
   *
   * @since 1.0.0
   */
  readonly mapFromEntries: mapFromEntries.SchemableParams2C<S>

  /**
   * Represents an exclusion of a supplied value where the exclusion is mapped to `None`.
   * Requires an inner schemable, and an Eq instance which defaults to strict equality.
   *
   * @since 1.0.0
   */
  readonly optionFromExclude: optionFromExclude.SchemableParams2C<S>

  /**
   * Represents a conversion from a nullable value to an Optional type
   *
   * @since 1.0.0
   */
  readonly optionFromNullable: optionFromNullable.SchemableParams2C<S>

  /**
   * Represents a conversion from an value that can be undefined to an Optional type
   *
   * @since 0.0.4
   */
  readonly optionFromUndefined: optionFromUndefined.SchemableParams2C<S>

  /**
   * Represents valid Date objects
   *
   * @since 1.0.0
   */
  readonly date: date.SchemableParams2C<S>

  /**
   * Represents a conversion from a valid dateString according to
   * [ECMA262](https://tc39.es/ecma262/#sec-date-time-string-format) which is a particular
   * subset of ISO8601 parsable with `Date.parse()`.
   *
   * @since 1.0.0
   */
  readonly dateFromIsoString: dateFromIsoString.SchemableParams2C<S>
}
