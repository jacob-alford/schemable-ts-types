import * as S from 'schemata-ts'
import * as JS from 'schemata-ts/JsonSchema'

import { runStandardTestSuite } from '../test-utils/test-suite'

const valid: ReadonlyArray<string> = [
  '(-17.738223, 85.605469)',
  '(-12.3456789, +12.3456789)',
  '(-60.978437, -0.175781)',
  '(77.719772, -37.529297)',
  '(7.264394, 165.058594)',
  '0.955766, -19.863281',
  '(31.269161,164.355469)',
  '+12.3456789, -12.3456789',
  '-15.379543, -137.285156',
  '(11.770570, -162.949219)',
  '-55.034319, 113.027344',
  '58.025555, 36.738281',
  '55.720923,-28.652344',
  '-90.00000,-180.00000',
  '(-71, -146)',
  '(-71.616864, -146.616864)',
  '-0.55, +0.22',
  '90, 180',
  '+90, -180',
  '-90,+180',
  '90,180',
  '0, 0',
]

const invalid: ReadonlyArray<string> = [
  '(0, 0',
  '0, 0)',
  '(020.000000, 010.000000000)',
  '89.9999999989, 360.0000000',
  '90.1000000, 180.000000',
  '+90.000000, -180.00001',
  '090.0000, 0180.0000',
  '126, -158',
  '(-126.400010, -158.400010)',
  '-95, -96',
  '-95.738043, -96.738043',
  '137, -148',
  '(-137.5942, -148.5942)',
  '(-120, -203)',
  '(-119, -196)',
  '+119.821728, -196.821728',
  '(-110, -223)',
  '-110.369532, 223.369532',
  '(-120.969949, +203.969949)',
  '-116, -126',
  '-116.894222, -126.894222',
  '-112, -160',
  '-112.96381, -160.96381',
  '-90., -180.',
  '+90.1, -180.1',
  '(-17.738223, 85.605469',
  '0.955766, -19.863281)',
  '+,-',
  '(,)',
  ',',
  ' ',
]

runStandardTestSuite(S.LatLong, _ => ({
  decoderTests: [
    ...valid.map(input => _.decoder.pass(input)),
    ...invalid.map(input => _.decoder.fail(input)),
  ],
  encoderTests: [...valid.map(expected => _.encoder.pass(_.c(expected), _.c(expected)))],
  guardTests: [],
  eqTests: [],
  jsonSchema: JS.string({
    pattern:
      '^([+\\x2d]?(90(\\.0+)?|(\\d|[1-7]\\d|8\\d)(\\.\\d+)?),[ \\x09\\x0a\\x0d\\x0c\\x0b]*[+\\x2d]?(180(\\.0+)?|(\\d|[1-8]\\d|9\\d|1(0\\d|[1-6]\\d|7\\d))(\\.\\d+)?)|\\([+\\x2d]?(90(\\.0+)?|(\\d|[1-7]\\d|8\\d)(\\.\\d+)?),[ \\x09\\x0a\\x0d\\x0c\\x0b]*[+\\x2d]?(180(\\.0+)?|(\\d|[1-8]\\d|9\\d|1(0\\d|[1-6]\\d|7\\d))(\\.\\d+)?)\\))$',
  }),
  typeString: 'LatLong',
}))()
