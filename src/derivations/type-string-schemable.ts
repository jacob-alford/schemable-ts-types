/**
 * Schemable instances for TypeString
 *
 * **Warning: DO NOT EDIT, this module is autogenerated**
 *
 * @since 2.0.0
 */
import type * as TS from 'schemata-ts/internal/type-string'
import { interpret } from 'schemata-ts/Schema'
import { type Schemable } from 'schemata-ts/Schemable'
import * as annotate from 'schemata-ts/schemables/annotate/instances/type-string'
import * as array from 'schemata-ts/schemables/array/instances/type-string'
import * as checkDigit from 'schemata-ts/schemables/check-digit/instances/type-string'
import * as clone from 'schemata-ts/schemables/clone/instances/type-string'
import * as date from 'schemata-ts/schemables/date/instances/type-string'
import * as guardedUnion from 'schemata-ts/schemables/guarded-union/instances/type-string'
import * as invariant from 'schemata-ts/schemables/invariant/instances/type-string'
import * as lazy from 'schemata-ts/schemables/lazy/instances/type-string'
import * as map from 'schemata-ts/schemables/map/instances/type-string'
import * as optional from 'schemata-ts/schemables/optional/instances/type-string'
import * as parser from 'schemata-ts/schemables/parser/instances/type-string'
import * as pattern from 'schemata-ts/schemables/pattern/instances/type-string'
import * as primitives from 'schemata-ts/schemables/primitives/instances/type-string'
import * as refine from 'schemata-ts/schemables/refine/instances/type-string'
import * as struct from 'schemata-ts/schemables/struct/instances/type-string'

/**
 * @since 2.0.0
 * @category Instances
 */
const TypeStringSchemable: Schemable<TS.SchemableLambda> = {
  ...annotate.AnnotateTypeString,
  ...array.ArrayTypeString,
  ...checkDigit.CheckDigitTypeString,
  ...clone.CloneTypeString,
  ...date.DateTypeString,
  ...guardedUnion.GuardedUnionTypeString,
  ...invariant.InvariantTypeString,
  ...lazy.LazyTypeString,
  ...map.MapTypeString,
  ...optional.OptionalTypeString,
  ...parser.ParserTypeString,
  ...pattern.PatternTypeString,
  ...primitives.PrimitivesTypeString,
  ...refine.RefineTypeString,
  ...struct.StructTypeString,
}

/**
 * @since 2.0.0
 * @category Interpreters
 */
export const getTypeString = interpret(TypeStringSchemable)
